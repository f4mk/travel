/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/lists': {
    get: {
      responses: {
        /** @description get all lists of owner */
        200: {
          content: {
            'application/json': components['schemas']['ListResponse'][]
          }
        }
        /** @description unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['NewList']
        }
      }
      responses: {
        /** @description create new list */
        201: {
          content: {
            'application/json': components['schemas']['ListResponse'][]
          }
        }
        /** @description bad request */
        400: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description conflict */
        409: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
  }
  '/lists/{list_id}': {
    get: {
      parameters: {
        path: {
          /** @description ID of the list */
          list_id: string
        }
      }
      responses: {
        /** @description returns a list with the specified ID */
        200: {
          content: {
            'application/json': components['schemas']['ListResponse']
          }
        }
        /** @description list not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put: {
      parameters: {
        path: {
          /** @description ID of the list */
          list_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateList']
        }
      }
      responses: {
        /** @description list successfully updated */
        200: {
          content: {
            'application/json': components['schemas']['ListResponse'][]
          }
        }
        /** @description bad request */
        400: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description forbidden */
        403: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    delete: {
      parameters: {
        path: {
          /** @description ID of the list */
          list_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': Record<string, never>
        }
      }
      responses: {
        /** @description list successfully deleted */
        200: {
          content: {
            'application/json': Record<string, never>
          }
        }
        /** @description bad request */
        400: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description forbidden */
        403: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
  }
  '/lists/{list_id}/items': {
    get: {
      parameters: {
        path: {
          /** @description ID of the list */
          list_id: string
        }
      }
      responses: {
        /** @description get all items of the specified list */
        200: {
          content: {
            'application/json': components['schemas']['ItemResponse'][]
          }
        }
        /** @description unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    post: {
      parameters: {
        path: {
          /** @description ID of the list */
          list_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['NewItem']
        }
      }
      responses: {
        /** @description create new item */
        201: {
          content: {
            'application/json': components['schemas']['ItemResponse'][]
          }
        }
        /** @description bad request */
        400: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description conflict */
        409: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
  }
  '/lists/{list_id}/items/{item_id}': {
    get: {
      parameters: {
        path: {
          /** @description ID of the list */
          list_id: string
          /** @description ID of the item */
          item_id: string
        }
      }
      responses: {
        /** @description get an item with ID of the specified list */
        200: {
          content: {
            'application/json': components['schemas']['ItemResponse']
          }
        }
        /** @description unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put: {
      parameters: {
        path: {
          /** @description ID of the list */
          list_id: string
          /** @description ID of the item */
          item_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateItem']
        }
      }
      responses: {
        /** @description item successfully updated */
        200: {
          content: {
            'application/json': components['schemas']['ItemResponse'][]
          }
        }
        /** @description bad request */
        400: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description forbidden */
        403: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    delete: {
      parameters: {
        path: {
          /** @description ID of the list */
          list_id: string
          /** @description ID of the item */
          item_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': Record<string, never>
        }
      }
      responses: {
        /** @description list successfully deleted */
        200: {
          content: {
            'application/json': Record<string, never>
          }
        }
        /** @description bad request */
        400: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description forbidden */
        403: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description not found */
        404: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
        /** @description internal server error */
        500: {
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ListResponse: {
      /** @description list id */
      id: string
      /** @description list owner id */
      user_id: string
      /** @description list name */
      name: string
      /** @description list description */
      description?: string
      /** @description is list private */
      private: boolean
      /** @description is list favorite */
      favorite: boolean
      /** @description is list completed */
      completed: boolean
      /** @description array of items ids */
      items_id?: string[]
      /** @description date of creation */
      date_created: string
      /** @description date of last update */
      date_updated?: string
    }
    ItemResponse: {
      /** @description item id */
      id: string
      /** @description item parent id */
      list_id: string
      /** @description item name */
      name: string
      /** @description item description */
      description?: string
      /** @description item address on map */
      address?: string
      point: components['schemas']['PointResponse']
      /** @description array of attached image links */
      image_links?: string[]
      /** @description location is visited */
      visited: boolean
      /** @description creation date */
      date_created: string
      /** @description date of last update */
      date_updated: string
    }
    /** @description item location on map */
    PointResponse: {
      /** @description location id */
      id: string
      /** @description location parent id */
      item_id: string
      /** @description latitude of location on map */
      lat: number
      /** @description longitude of location on map */
      lng: number
    }
    /** @description new list object */
    NewList: {
      /** @description new list name */
      name: string
      /** @description new list description */
      description?: string
      /** @description is new list private */
      private?: boolean
    }
    /** @description update list object */
    UpdateList: {
      /** @description updated list name */
      name?: string
      /** @description updated list description */
      description?: string
      /** @description updated list privacy setting */
      private?: boolean
      /** @description updated list favorite setting */
      favorite?: boolean
      /** @description updated list completeness setting */
      completed?: boolean
      /** @description array of list's items */
      items_id?: string[]
    }
    /** @description new item object */
    NewItem: {
      /** @description new item name */
      name: string
      /** @description new item description */
      description?: string
      /** @description new item address */
      address?: string
      point: components['schemas']['NewPoint']
      /** @description new item's image links array */
      image_links?: string[]
    }
    /** @description new point object */
    NewPoint: {
      /** @description new point's latitude */
      lat: number
      /** @description new point's latitude */
      lng: number
    }
    /** @description update item object */
    UpdateItem: {
      /** @description updated item name */
      name?: string
      /** @description updated item description */
      description?: string
      /** @description updated item address */
      address?: string
      point?: components['schemas']['UpdatePoint']
      /** @description updated item's image links array */
      image_links?: string[]
      /** @description updated item visited mark */
      visited?: boolean
    }
    /** @description new point object */
    UpdatePoint: {
      /** @description new point's latitude */
      lat: number
      /** @description new point's latitude */
      lng: number
    }
    ErrorResponse: {
      /** @description error message */
      error: string
      fields?: {
        [key: string]: string
      }
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export type operations = Record<string, never>
