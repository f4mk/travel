openapi: "3.0.0"
info:
  version: 1.0.0
  title: API
paths:
  /lists:
    get:
      tags: ["lists","get"]
      responses:
        '200':
          description: get all lists of owner
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: ["lists","post","create"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewList'
      responses:
        '201':
          description: create new list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /lists/{list_id}:
    get:
      tags: ["lists","get"]
      parameters:
        - name: list_id
          in: path
          required: true
          description: ID of the list
          schema:
            type: string
      responses:
        '200':
          description: returns a list with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        '404':
          description: list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: ["lists","put","update"]
      parameters:
        - name: list_id
          in: path
          required: true
          description: ID of the list
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateList'
      responses:
        '200':
          description: list successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: ["lists","delete"]
      parameters:
        - name: list_id
          in: path
          required: true
          description: ID of the list
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
      responses:
        '200':
          description: list successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /lists/{list_id}/items:
    get:
      tags: ["items","get"]
      parameters:
        - name: list_id
          in: path
          required: true
          description: ID of the list
          schema:
            type: string
      responses:
        '200':
          description: get all items of the specified list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: ["items","post","create"]
      parameters:
        - name: list_id
          in: path
          required: true
          description: ID of the list
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewItem'
      responses:
        '201':
          description: create new item
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /lists/{list_id}/items/{item_id}:
    get:
      tags: ["items","get"]
      parameters:
        - name: list_id
          in: path
          required: true
          description: ID of the list
          schema:
            type: string
        - name: item_id
          in: path
          required: true
          description: ID of the item
          x-go-name: itemID
          schema:
            type: string
      responses:
        '200':
          description: get an item with ID of the specified list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: ["items","put","update"]
      parameters:
        - name: list_id
          in: path
          required: true
          description: ID of the list
          schema:
            type: string
        - name: item_id
          in: path
          required: true
          description: ID of the item
          x-go-name: itemID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItem'
      responses:
        '200':
          description: item successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: ["lists","delete"]
      parameters:
        - name: list_id
          in: path
          required: true
          description: ID of the list
          schema:
            type: string
        - name: item_id
          in: path
          required: true
          description: ID of the item
          x-go-name: itemID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
      responses:
        '200':
          description: list successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


components:
  schemas:
    ListResponse:
      type: object
      properties:
        id:
          type: string
          description: "list id"
          x-go-name: ID
        user_id:
          type: string
          description: "list owner id"
          x-go-name: UserID
        name:
          type: string
          description: "list name"
        description:
          type: string
          description: "list description"
        private:
          type: boolean
          description: "is list private"
        favorite:
          type: boolean
          description: "is list favorite"
        completed:
          type: boolean
          description: "is list completed"
        items_id:
          type: array
          description: "array of items ids"
          x-go-name: ItemsID
          items:
            type: string
            description: "id of item that belongs to list"
        date_created:
          type: string
          description: "date of creation"
          x-go-type: time.Time
        date_updated:
          type: string
          description: "date of last update"
          x-go-type: time.Time
      required:
        - id
        - user_id
        - name
        - private
        - favorite
        - completed
        - date_created
        
    ItemResponse:
      type: object
      properties:
        id: 
          type: string
          description: "item id"
          x-go-name: ID
        list_id: 
          type: string
          description: "item parent id"
          x-go-name: ListID
        name: 
          type: string
          description: "item name"
        description: 
          type: string
          description: "item description"
        address: 
          type: string
          description: "item address on map"
        point: 
          $ref: '#/components/schemas/PointResponse'
        images_id:
          type: array
          description: "array of attached image ids"
          x-go-name: ImagesID
          items:
            type: string
            description: "image id"
        visited: 
          type: boolean
          description: "location is visited"
        date_created:
          type: string
          description: "creation date"
          x-go-type: time.Time
        date_updated:
          type: string
          description: "date of last update"
          x-go-type: time.Time
      required:
        - id
        - list_id
        - name
        - point
        - visited
        - date_created
        - date_updated

    PointResponse:
      type: object
      description: "item location on map"
      properties:
        id:
          type: string
          description: "location id"
          x-go-name: ID
        item_id:
          type: string
          description: "location parent id"
          x-go-name: ItemID
        lat:
          type: number
          description: "latitude of location on map"
          x-go-type: float64
        lng:
          type: number
          description: "longitude of location on map"
          x-go-type: float64
      required:
        - id
        - item_id
        - lat
        - lng

    NewList:
      type: object
      description: new list object
      properties:
        name: 
          type: string
          description: new list name
          x-oapi-codegen-extra-tags:
            validate: "required,gte=1"
        description:
          type: string
          description: new list description
          x-oapi-codegen-extra-tags:
            validate: "omitempty,gte=1"
        private:
          type: boolean
          description: is new list private
          x-oapi-codegen-extra-tags:
            validate: "omitempty,boolean"
      required:
        - name

    UpdateList:
      type: object
      description: update list object
      properties:
        name:
          type: string
          description: updated list name
          x-oapi-codegen-extra-tags:
            validate: "omitempty,gte=1"
        description:
          type: string
          description: updated list description
          x-oapi-codegen-extra-tags:
            validate: "omitempty,gte=1"
        private:
          type: boolean
          description: updated list privacy setting
          x-oapi-codegen-extra-tags:
            validate: "omitempty,boolean"
        favorite:
          type: boolean
          description: updated list favorite setting
          x-oapi-codegen-extra-tags:
            validate: "omitempty,boolean"
        completed:
          type: boolean
          description: updated list completeness setting
          x-oapi-codegen-extra-tags:
            validate: "omitempty,boolean"
        items_id:
          type: array
          description: array of list's items
          x-go-name: ItemsID
          x-oapi-codegen-extra-tags:
            validate: "omitempty"
          items:
            type: string
            description: updates list's item id

    NewItem:
      type: object
      description: new item object
      properties:
        name:
          type: string
          description: new item name
          x-oapi-codegen-extra-tags:
            validate: "required,gte=1"
        description:
          type: string
          description: new item description
          x-oapi-codegen-extra-tags:
            validate: "omitempty,gte=1"
        address:
          type: string
          description: new item address
          x-oapi-codegen-extra-tags:
            validate: "omitempty"
        point:
          x-oapi-codegen-extra-tags:
            validate: "required,dive"
          $ref: '#/components/schemas/NewPoint'
        images_id:
          type: array
          description: new item's image links array
          x-go-name: ImagesID
          x-oapi-codegen-extra-tags:
            validate: "omitempty"
          items:
            type: string
            description: new item's image url
      required:
        - name
        - point

    NewPoint:
      type: object
      description: new point object
      properties:
        lat:
          type: number
          description: new point's latitude
          x-go-type: float64
          x-oapi-codegen-extra-tags:
            validate: "required,number"
        lng:
          type: number
          description: new point's latitude
          x-go-type: float64
          x-oapi-codegen-extra-tags:
            validate: "required,number"
      required:
        - lat
        - lng

    UpdateItem:
      type: object
      description: update item object
      properties:
        name:
          type: string
          description: updated item name
          x-oapi-codegen-extra-tags:
            validate: "omitempty,gte=1"
        description:
          type: string
          description: updated item description
          x-oapi-codegen-extra-tags:
            validate: "omitempty,gte=1"
        address:
          type: string
          description: updated item address
          x-oapi-codegen-extra-tags:
            validate: "omitempty,gte=1"
        point:
          x-oapi-codegen-extra-tags:
            validate: "omitempty,dive"
          $ref: '#/components/schemas/UpdatePoint'
        images_id:
          type: array
          description: updated item's image links array
          x-go-name: ImagesID
          x-oapi-codegen-extra-tags:
            validate: "omitempty"
          items:
            type: string
            description: updated item's image url
        visited:
          type: boolean
          description: updated item visited mark
          x-oapi-codegen-extra-tags:
            validate: "omitempty,boolean"
      required:
        - id
        - list_id

    UpdatePoint:
      type: object
      description: new point object
      properties:
        lat:
          type: number
          description: new point's latitude
          x-go-type: float64
          x-oapi-codegen-extra-tags:
            validate: "required,number"
        lng:
          type: number
          description: new point's latitude
          x-go-type: float64
          x-oapi-codegen-extra-tags:
            validate: "required,number"
      required:
        - id
        - lat
        - lng

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: error message
        fields:
          type: object
          additionalProperties:
            type: string
      required:
        - error
